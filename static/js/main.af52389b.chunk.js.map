{"version":3,"sources":["components/DrumPad.js","components/DrumDisplay.js","components/DrumMachine.js","App.js","reportWebVitals.js","index.js"],"names":["DrumPad","props","playSound","bind","Audio","this","drumKey","url","play","document","getElementById","keyTrigger","style","backgroundColor","setTimeout","setKeyDisplay","keyName","className","onClick","id","src","Component","DrumDisplay","keyDisplay","listDrumPad","DrumMachine","state","nameValue","setState","addEventListener","event","index","key","toUpperCase","drumContainer","map","currentValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gQA2BeA,E,kDAxBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,UAAY,EAAKA,UAAUC,KAAf,gBAFF,E,6CAInB,WAAa,IAAD,OACM,IAAIC,MAAMC,KAAKJ,MAAMK,QAAQC,KACrCC,OACNC,SAASC,eAAeL,KAAKJ,MAAMK,QAAQK,YAAYC,MAAMC,gBAAkB,UAC/EC,YAAW,WACPL,SAASC,eAAe,EAAKT,MAAMK,QAAQK,YAAYC,MAAMC,gBAAkB,uBACjF,KACFR,KAAKJ,MAAMc,cAAcV,KAAKJ,MAAMK,QAAQU,W,oBAEhD,WACI,OACI,sBAAKC,UAAU,WAAf,UACI,wBAAQC,QAASb,KAAKH,UAAWiB,GAAId,KAAKJ,MAAMK,QAAQK,WAAxD,SAAqEN,KAAKJ,MAAMK,QAAQK,aACxF,uBAAOM,UAAU,OAAOG,IAAKf,KAAKJ,MAAMK,QAAQC,a,GAlB1Cc,aCUPC,E,4JATX,WACI,OACI,qBAAKH,GAAG,UAAR,SACI,6BAAKd,KAAKJ,MAAMsB,mB,GAJNF,aCEpBG,EAAc,CAChB,CACEb,WAAY,IACZK,QAAS,WACTT,IAAK,4DAEP,CACEI,WAAY,IACZK,QAAS,WACTT,IAAK,4DAEP,CACEI,WAAY,IACZK,QAAS,WACTT,IAAK,4DAEP,CACEI,WAAY,IACZK,QAAS,WACTT,IAAK,8DAEP,CACEI,WAAY,IACZK,QAAS,OACTT,IAAK,4DAEP,CACEI,WAAY,IACZK,QAAS,UACTT,IAAK,0DAEP,CACEI,WAAY,IACZK,QAAS,cACTT,IAAK,8DAEP,CACEI,WAAY,IACZK,QAAS,OACTT,IAAK,8DAEP,CACEI,WAAY,IACZK,QAAS,YACTT,IAAK,2DA6CIkB,E,kDAxCX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTH,WAAY,KAEhB,EAAKR,cAAgB,EAAKA,cAAcZ,KAAnB,gBALN,E,iDAOnB,SAAcwB,GACVtB,KAAKuB,SAAS,CAACL,WAAYI,M,+BAE/B,WAAqB,IAAD,OAChBlB,SAASoB,iBAAiB,YAAY,SAACC,GACnC,IAAI,IAAIC,KAASP,EACb,GAAIM,EAAME,IAAIC,gBAAkBT,EAAYO,GAAOpB,WAAY,CAC7C,IAAIP,MAAMoB,EAAYO,GAAOxB,KACrCC,OACNC,SAASC,eAAeoB,EAAME,IAAIC,eAAerB,MAAMC,gBAAkB,UACzEC,YAAW,WACPL,SAASC,eAAeoB,EAAME,IAAIC,eAAerB,MAAMC,gBAAkB,uBAC3E,KACF,EAAKE,cAAcS,EAAYO,GAAOf,SACtC,Y,oBAKhB,WAAU,IAAD,OACCkB,EAAgBV,EACrBW,KAAI,SAACC,GAAD,OAAkB,cAAC,EAAD,CAAS9B,QAAS8B,EAAcrB,cAAe,EAAKA,mBAC3E,OACI,sBAAKI,GAAG,eAAR,UACI,qBAAKA,GAAG,iBAAR,SACKe,IAEL,cAAC,EAAD,CAAaX,WAAYlB,KAAKqB,MAAMH,oB,GAnC1BF,aCzCXgB,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.af52389b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DrumPad extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.playSound = this.playSound.bind(this);\r\n    }\r\n    playSound() {\r\n        const audio = new Audio(this.props.drumKey.url);\r\n        audio.play();\r\n        document.getElementById(this.props.drumKey.keyTrigger).style.backgroundColor = \"#1874ec\";\r\n        setTimeout(() => {\r\n            document.getElementById(this.props.drumKey.keyTrigger).style.backgroundColor = \"rgb(235, 241, 253)\";\r\n        },200);\r\n        this.props.setKeyDisplay(this.props.drumKey.keyName);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"drum-pad\">\r\n                <button onClick={this.playSound} id={this.props.drumKey.keyTrigger}>{this.props.drumKey.keyTrigger}</button>\r\n                <audio className=\"clip\" src={this.props.drumKey.url}>\r\n                </audio>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React, { Component } from 'react';\r\n\r\nclass DrumDisplay extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"display\">\r\n                <h3>{this.props.keyDisplay}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumDisplay;\r\n","import React, { Component } from 'react';\r\nimport DrumPad from './DrumPad';\r\nimport DrumDisplay from './DrumDisplay';\r\n\r\nconst listDrumPad = [\r\n    {\r\n      keyTrigger: 'Q',\r\n      keyName: 'Heater-1',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'W',\r\n      keyName: 'Heater-2',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'E',\r\n      keyName: 'Heater-3',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'A',\r\n      keyName: 'Heater-4',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'S',\r\n      keyName: 'Clap',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'D',\r\n      keyName: 'Open-HH',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'Z',\r\n      keyName: \"Kick-n'-Hat\",\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'X',\r\n      keyName: 'Kick',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n    },\r\n    {\r\n      keyTrigger: 'C',\r\n      keyName: 'Closed-HH',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n    }\r\n];\r\n\r\nclass DrumMachine extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            keyDisplay: '-'\r\n        }\r\n        this.setKeyDisplay = this.setKeyDisplay.bind(this);\r\n    }\r\n    setKeyDisplay(nameValue) {\r\n        this.setState({keyDisplay: nameValue});\r\n    }\r\n    componentDidMount() {\r\n        document.addEventListener(\"keypress\", (event) => {\r\n            for(let index in listDrumPad) {\r\n                if (event.key.toUpperCase() === listDrumPad[index].keyTrigger) {\r\n                    const audio = new Audio(listDrumPad[index].url);\r\n                    audio.play();\r\n                    document.getElementById(event.key.toUpperCase()).style.backgroundColor = \"#1874ec\";\r\n                    setTimeout(() => {\r\n                        document.getElementById(event.key.toUpperCase()).style.backgroundColor = \"rgb(235, 241, 253)\";\r\n                    },200);\r\n                    this.setKeyDisplay(listDrumPad[index].keyName);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        const drumContainer = listDrumPad\r\n        .map((currentValue) => <DrumPad drumKey={currentValue} setKeyDisplay={this.setKeyDisplay} />);\r\n        return (\r\n            <div id=\"drum-machine\">\r\n                <div id=\"drum-container\">\r\n                    {drumContainer}\r\n                </div>\r\n                <DrumDisplay keyDisplay={this.state.keyDisplay}></DrumDisplay>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumMachine;\r\n","import './App.scss';\nimport DrumMachine from './components/DrumMachine';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DrumMachine></DrumMachine>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}